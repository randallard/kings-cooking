name: 🚀 Deploy to GitHub Pages

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    name: Build & Test
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'pnpm'

      - name: 📚 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔍 Type checking
        run: pnpm run check

      - name: 🎨 Lint code
        run: pnpm run lint

      - name: 🧪 Run tests
        run: pnpm run test:coverage

      - name: ⚡ Check coverage threshold
        run: |
          COVERAGE=$(pnpm run test:coverage --reporter=json | jq '.coverage.total.lines.pct')
          echo "Coverage: $COVERAGE%"
          if (( $(echo "$COVERAGE < 80" | bc -l) )); then
            echo "❌ Coverage below 80% threshold: $COVERAGE%"
            exit 1
          else
            echo "✅ Coverage meets 80% threshold: $COVERAGE%"
          fi

      - name: 🏗️ Build for production
        run: pnpm run build
        env:
          NODE_ENV: production

      - name: 📊 Analyze bundle size
        run: |
          echo "📦 Bundle size analysis:"
          find dist -name "*.js" -exec ls -lh {} \; | sort -k5 -hr

          # Check for large bundles
          LARGE_FILES=$(find dist -name "*.js" -size +500k)
          if [ -n "$LARGE_FILES" ]; then
            echo "⚠️  Large JavaScript files detected:"
            echo "$LARGE_FILES"
            echo "Consider code splitting or optimization"
          fi

      - name: 🧪 Test production build
        run: |
          pnpm run preview &
          SERVER_PID=$!
          sleep 5

          # Basic health check
          if curl -f http://localhost:4321/ > /dev/null 2>&1; then
            echo "✅ Production build serves correctly"
          else
            echo "❌ Production build failed to serve"
            exit 1
          fi

          kill $SERVER_PID

      - name: 🔍 Validate HTML
        run: |
          # Check for common HTML issues
          if grep -r "console\." dist/ --include="*.html" --include="*.js"; then
            echo "⚠️  Console statements found in production build"
          fi

          # Check for sourcemaps in production (shouldn't be there)
          if find dist -name "*.map"; then
            echo "⚠️  Source maps found in production build"
          fi

      - name: 📁 Setup Pages
        uses: actions/configure-pages@v5

      - name: 📤 Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './dist'

  deploy:
    name: Deploy to Pages
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: 🚀 Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: 🌐 Post-deployment verification
        run: |
          URL="${{ steps.deployment.outputs.page_url }}"
          echo "Deployed to: $URL"

          # Wait for deployment to be ready
          sleep 30

          # Verify deployment
          if curl -f "$URL" > /dev/null 2>&1; then
            echo "✅ Deployment successful and accessible"
          else
            echo "❌ Deployment verification failed"
            exit 1
          fi

      - name: 🎉 Deployment success notification
        run: |
          echo "🎊 King's Cooking deployed successfully!"
          echo "🌐 Live at: ${{ steps.deployment.outputs.page_url }}"
          echo "📊 Build completed with all quality checks passed"